import { classifyIntent } from './intents';
import { detectLanguage, translate, getLanguageName } from './lang';
import { extractSlots, formatSlotsForDisplay } from './slots';
import { findFreeSlots, createEvent, formatEventTime } from '../services/calendar/calendar';
import { createTask, getTasks, getTaskStats, formatTaskList } from '../services/tasks/taskService';
import { getPending, setPending, clearPending, incrementRetry } from '../state/pending';

export type OrchestratorResponse = { 
  text: string; 
  tts?: boolean;
  language?: string;
  metadata?: {
    intent?: string;
    confidence?: number;
    slots?: any;
  };
};

function dtToISO(date: string, time: string, tz = 'Europe/Berlin', durMin = 30): {start: string, end: string} {
  try {
    const [Y, M, D] = date.split('-').map(Number);
    const [h, m] = time.split(':').map(Number);
    
    // Create date in user's timezone
    const start = new Date();
    start.setFullYear(Y, M-1, D);
    start.setHours(h, m, 0, 0);
    
    const end = new Date(start.getTime() + durMin * 60000);
    
    return { 
      start: start.toISOString(), 
      end: end.toISOString() 
    };
  } catch (error) {
    console.error('[DATE TIME CONVERSION ERROR]', error);
    // Fallback to current time + duration
    const now = new Date();
    const end = new Date(now.getTime() + durMin * 60000);
    return {
      start: now.toISOString(),
      end: end.toISOString()
    };
  }
}

export async function processMessage(userId: string, text: string): Promise<OrchestratorResponse> {
  try {
    console.log(`[ORCHESTRATOR] Processing message from user ${userId}: "${text}"`);

    // 0) Check for pending session
    const pending = await getPending(userId);
    if (pending) {
      console.log(`[ORCHESTRATOR] Found pending session: ${pending.intent}`);
      
      // Handle confirmation
      if (/^\s*(–¥–∞|yes|–æ–∫|okay|–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é|confirm|ja|s√≠|oui|ÊòØ|„ÅØ„ÅÑ)\s*$/i.test(text)) {
        return await handleConfirmation(userId, pending);
      }
      
      // Handle cancellation
      if (/^\s*(–Ω–µ—Ç|no|cancel|–æ—Ç–º–µ–Ω–∞|–æ—Ç–º–µ–Ω–∏—Ç—å|nein|non|‰∏ç|„ÅÑ„ÅÑ„Åà)\s*$/i.test(text)) {
        await clearPending(userId);
        return { text: '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?', tts: true };
      }
      
      // Handle additional information
      return await handleAdditionalInfo(userId, pending, text);
    }

    // 1) Detect language
    const detectedLang = await detectLanguage(text).catch(() => 'en');
    console.log(`[ORCHESTRATOR] Detected language: ${detectedLang}`);

    // 2) Classify intent
    const intentResult = await classifyIntent(text, detectedLang);
    console.log(`[ORCHESTRATOR] Intent: ${intentResult.intent} (confidence: ${intentResult.confidence})`);

    // 3) Process by intent
    switch (intentResult.intent) {
      case 'translate':
        return await handleTranslate(text, detectedLang);
        
      case 'create_task':
        return await handleCreateTask(userId, text, detectedLang);
        
      case 'create_meeting':
        return await handleCreateMeeting(userId, text, detectedLang);
        
      case 'call_someone':
        return await handleCallSomeone(text, detectedLang);
        
      case 'summarize':
        return await handleSummarize(text, detectedLang);
        
      case 'small_talk':
        return await handleSmallTalk(text, detectedLang);
        
      default:
        return await handleUnknown(text, detectedLang);
    }
  } catch (error) {
    console.error('[ORCHESTRATOR ERROR]', error);
    return { 
      text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 
      tts: true,
      language: 'ru'
    };
  }
}

async function handleConfirmation(userId: string, pending: any): Promise<OrchestratorResponse> {
  try {
    if (pending.intent === 'create_meeting') {
      const slots = pending.slots;
      const dt = dtToISO(slots.date, slots.time, 'Europe/Berlin', slots.duration_min || 30);
      
      const result = await createEvent(userId, {
        title: slots.title || '–í—Å—Ç—Ä–µ—á–∞',
        startISO: dt.start,
        endISO: dt.end,
        attendees: slots.attendees,
        zoom: true,
        location: slots.location,
        description: slots.description,
      });
      
      await clearPending(userId);
      
      if (result.ok) {
        const timeStr = formatEventTime(dt.start, dt.end);
        let response = `‚úÖ –í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüìÖ ${timeStr}\nüìù ${slots.title || '–í—Å—Ç—Ä–µ—á–∞'}`;
        
        if (result.joinUrl) {
          response += `\nüîó Zoom: ${result.joinUrl}`;
        }
        
        if (slots.attendees?.length) {
          response += `\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${slots.attendees.join(', ')}`;
        }
        
        return { text: response, tts: true };
      } else {
        return { text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É: ${result.error}`, tts: true };
      }
    }
    
    if (pending.intent === 'create_task') {
      const slots = pending.slots;
      const result = await createTask(userId, {
        title: slots.title || '–ó–∞–¥–∞—á–∞',
        description: slots.description,
        dueAt: slots.due_date,
        priority: slots.priority || 'medium',
        tags: slots.tags,
      });
      
      await clearPending(userId);
      
      if (result.ok && result.task) {
        return { text: `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${result.task.title}`, tts: true };
      } else {
        return { text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: ${result.error}`, tts: true };
      }
    }
    
    await clearPending(userId);
    return { text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.', tts: true };
  } catch (error) {
    console.error('[CONFIRMATION ERROR]', error);
    await clearPending(userId);
    return { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', tts: true };
  }
}

async function handleAdditionalInfo(userId: string, pending: any, text: string): Promise<OrchestratorResponse> {
  try {
    // Try to extract additional slots from the new text
    const additionalSlots = await extractSlots(text, pending.intent, 'en');
    
    // Merge with existing slots
    const mergedSlots = { ...pending.slots, ...additionalSlots };
    
    // Update pending session
    await setPending(userId, {
      step: pending.step,
      intent: pending.intent,
      slots: mergedSlots,
    });
    
    // Generate updated summary
    if (pending.intent === 'create_meeting') {
      const slots = mergedSlots;
      if (!slots.date || !slots.time) {
        return { text: '–£—Ç–æ—á–Ω–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –Ω–∞ 30 –º–∏–Ω—É—Ç).', tts: true };
      }
      
      const summary = `–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É "${slots.title || '–í—Å—Ç—Ä–µ—á–∞'}" ${slots.date} –≤ ${slots.time} –Ω–∞ ${slots.duration_min || 30} –º–∏–Ω${slots.attendees?.length ? ' —Å ' + slots.attendees.join(', ') : ''}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏? (–¥–∞/–Ω–µ—Ç)`;
      return { text: summary, tts: true };
    }
    
    if (pending.intent === 'create_task') {
      const slots = mergedSlots;
      if (!slots.title) {
        return { text: '–ö–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É?', tts: true };
      }
      
      const summary = `–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É "${slots.title}"${slots.due_date ? ' –¥–æ ' + slots.due_date : ''}${slots.priority ? ' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' + slots.priority + ')' : ''}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏? (–¥–∞/–Ω–µ—Ç)`;
      return { text: summary, tts: true };
    }
    
    return { text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏? (–¥–∞/–Ω–µ—Ç)', tts: true };
  } catch (error) {
    console.error('[ADDITIONAL INFO ERROR]', error);
    return { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.', tts: true };
  }
}

async function handleTranslate(text: string, detectedLang: string): Promise<OrchestratorResponse> {
  try {
    // Extract target language and text to translate
    const langPatterns = [
      { re: /–Ω–∞\s+(—Ä—É—Å—Å–∫–∏–π|–Ω–µ–º–µ—Ü–∫–∏–π|–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|–∫–∏—Ç–∞–π—Å–∫–∏–π|–∏—Å–ø–∞–Ω—Å–∫–∏–π|—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)/i, lang: 'ru' },
      { re: /–Ω–∞\s+(de|en|ru|zh|es|fr)/i, lang: 'en' },
      { re: /to\s+(russian|german|english|chinese|spanish|french)/i, lang: 'en' },
      { re: /ins\s+(russische|deutsche|englische|chinesische|spanische|franz√∂sische)/i, lang: 'de' },
    ];
    
    let targetLang = 'en'; // Default
    let textToTranslate = text;
    
    for (const pattern of langPatterns) {
      const match = text.match(pattern.re);
      if (match) {
        const langMap: Record<string, string> = {
          '—Ä—É—Å—Å–∫–∏–π': 'ru', '–Ω–µ–º–µ—Ü–∫–∏–π': 'de', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en', '–∫–∏—Ç–∞–π—Å–∫–∏–π': 'zh', '–∏—Å–ø–∞–Ω—Å–∫–∏–π': 'es', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr',
          'russian': 'ru', 'german': 'de', 'english': 'en', 'chinese': 'zh', 'spanish': 'es', 'french': 'fr',
          'russische': 'ru', 'deutsche': 'de', 'englische': 'en', 'chinesische': 'zh', 'spanische': 'es', 'franz√∂sische': 'fr',
        };
        
        targetLang = langMap[match[1].toLowerCase()] || match[1].toLowerCase();
        textToTranslate = text.replace(pattern.re, '').trim();
        break;
      }
    }
    
    if (textToTranslate.length === 0) {
      textToTranslate = text;
    }
    
    const translation = await translate(textToTranslate, targetLang, detectedLang);
    const targetLangName = getLanguageName(targetLang);
    
    return { 
      text: `üåê –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${targetLangName}:\n\n${translation}`, 
      tts: true,
      language: targetLang
    };
  } catch (error) {
    console.error('[TRANSLATE ERROR]', error);
    return { text: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.', tts: true };
  }
}

async function handleCreateTask(userId: string, text: string, detectedLang: string): Promise<OrchestratorResponse> {
  try {
    const slots = await extractSlots(text, 'create_task', detectedLang);
    
    if (!slots.title) {
      return { text: '–ö–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É? –û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.', tts: true };
    }
    
    // For simple tasks, create immediately
    if (slots.title && !slots.due_date && !slots.priority) {
      const result = await createTask(userId, {
        title: slots.title,
        description: slots.description,
      });
      
      if (result.ok) {
        return { text: `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${slots.title}`, tts: true };
      } else {
        return { text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: ${result.error}`, tts: true };
      }
    }
    
    // For complex tasks, ask for confirmation
    const summary = `–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É "${slots.title}"${slots.due_date ? ' –¥–æ ' + slots.due_date : ''}${slots.priority ? ' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' + slots.priority + ')' : ''}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏? (–¥–∞/–Ω–µ—Ç)`;
    
    await setPending(userId, {
      step: 'confirm',
      intent: 'create_task',
      slots,
    });
    
    return { text: summary, tts: true };
  } catch (error) {
    console.error('[CREATE TASK ERROR]', error);
    return { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.', tts: true };
  }
}

async function handleCreateMeeting(userId: string, text: string, detectedLang: string): Promise<OrchestratorResponse> {
  try {
    const slots = await extractSlots(text, 'create_meeting', detectedLang);
    
    if (!slots.date || !slots.time) {
      return { text: '–£—Ç–æ—á–Ω–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –Ω–∞ 30 –º–∏–Ω—É—Ç).', tts: true };
    }
    
    const summary = `–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É "${slots.title || '–í—Å—Ç—Ä–µ—á–∞'}" ${slots.date} –≤ ${slots.time} –Ω–∞ ${slots.duration_min || 30} –º–∏–Ω${slots.attendees?.length ? ' —Å ' + slots.attendees.join(', ') : ''}${slots.location ? ' –≤ ' + slots.location : ''}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏? (–¥–∞/–Ω–µ—Ç)`;
    
    await setPending(userId, {
      step: 'confirm',
      intent: 'create_meeting',
      slots,
    });
    
    return { text: summary, tts: true };
  } catch (error) {
    console.error('[CREATE MEETING ERROR]', error);
    return { text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.', tts: true };
  }
}

async function handleCallSomeone(text: string, detectedLang: string): Promise<OrchestratorResponse> {
  const responses = [
    '–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?',
    '–î–ª—è –∑–≤–æ–Ω–∫–∞ –º–æ–≥—É: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ß—Ç–æ –Ω—É–∂–Ω–æ?',
    '–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∑–≤–æ–Ω–∫–∞: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–≤–æ–Ω–∫–µ, –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
  ];
  
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  return { text: randomResponse, tts: true };
}

async function handleSummarize(text: string, detectedLang: string): Promise<OrchestratorResponse> {
  return { 
    text: '–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç/–ø–æ–¥–±–æ—Ä–∫—É –ø—É–Ω–∫—Ç–æ–≤ ‚Äî —Å–¥–µ–ª–∞—é –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É. –ü–æ–∫–∞ —á—Ç–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.', 
    tts: true 
  };
}

async function handleSmallTalk(text: string, detectedLang: string): Promise<OrchestratorResponse> {
  const greetings = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Å—Ç—Ä–µ—á, —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ –∏ –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?',
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?',
    '–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ú–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ß—Ç–æ –¥–µ–ª–∞–µ–º?',
  ];
  
  const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
  return { text: randomGreeting, tts: true };
}

async function handleUnknown(text: string, detectedLang: string): Promise<OrchestratorResponse> {
  const responses = [
    '–ü–æ–Ω—è–ª. –ú–æ–≥—É –ø–æ–º–æ—á—å: —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –ø–æ–¥—ã—Ç–æ–∂–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?',
    '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ. –ú–æ–≥—É: –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É, —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
    '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á, –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?',
  ];
  
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  return { text: randomResponse, tts: true };
}
