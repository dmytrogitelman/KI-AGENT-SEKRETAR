// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  language    String   @default("en")
  timezone    String   @default("Europe/Berlin")
  preferences Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages     Message[]
  sessions     Session[]
  integrations Integration[]
  tasks        Task[]
  events       Event[]
  contacts     Contact[]
  notes        Note[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  data      Json?
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id          String      @id @default(cuid())
  userId      String
  messageId   String      @unique
  type        MessageType
  content     String
  language    String?
  intent      String?
  confidence  Float?
  response    String?
  audioUrl    String?
  ttsUsed     Boolean     @default(false)
  processedAt DateTime?
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Integration {
  id          String           @id @default(cuid())
  userId      String
  provider    IntegrationType
  accessToken String
  refreshToken String?
  expiresAt   DateTime?
  config      Json?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("integrations")
}

model Task {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  recurring   Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Event {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  zoomUrl     String?
  status      EventStatus @default(CONFIRMED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  email     String?
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

enum MessageType {
  TEXT
  AUDIO
  IMAGE
  DOCUMENT
}

enum IntegrationType {
  GOOGLE_CALENDAR
  MICROSOFT_CALENDAR
  GMAIL
  MICROSOFT_MAIL
  ZOOM
  TODOIST
  NOTION
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}

